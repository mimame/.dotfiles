# https://git-scm.com/docs/git-config
[alias]
  # Remove extra git (git git ... -> git ...)
  git = !git
  # List with all alias
  als = !git config --list | grep -F 'alias.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\\t => \\2/' | sort -k1,1
  # add - https://git-scm.com/docs/git-add
  a    = add
  aa   = add --all
  af   = add --force
  ai   = add --interactive
  aii  = !FILES=$(git -c color.status=always status -s | fzf --ansi --multi --preview 'git diff --color {2}' | awk '{ print $2 }' ) && [[ -n ${FILES} ]] && git add --all ${FILES}
  ap   = add --patch
  api  = !FILES=$(git -c color.status=always status -s | fzf --ansi --multi --preview 'git diff --color {2}' | awk '{ print $2 }' ) && [[ -n ${FILES} ]] && git add --patch ${FILES}
  au   = add --update
  # add & commit
  auc = !git add --update && git commit
  # apply patch - https://git-scm.com/docs/git-apply
  apc = apply --check
  app = apply
  aps = apply --stat
  # am patches from mailbox - https://git-scm.com/docs/git-am
  ama = am --abort
  amr = am --resolved
  ams = am --skip
  # bisect - https://git-scm.com/docs/git-bisect
  bs   = bisect
  bsb  = bisect bad
  bsg  = bisect good
  bsgi = !HASH=$(git l --color | fzf --ansi --no-sort --preview 'git show --color {2}' | tr -d '|_*./\\\\' | awk '{print $1}' ) && git bisect good ${HASH}
  bsr  = bisect reset
  bss  = bisect start
  bsv  = bisect visualize
  bsvl = bisect log
  bsvs = bisect visualize --stat
  # blame - https://git-scm.com/docs/git-blame
  bl = blame
  # branch - https://git-scm.com/docs/git-branch
  b   = branch
  ba  = branch --all
  bd  = branch --delete
  # First sort branches by date
  bi  = !BRANCH=$(git for-each-ref --sort=-committerdate --format='%(refname:short)' refs/heads | fzf) && git checkout ${BRANCH}
  br  = branch --remotes
  # checkout - https://git-scm.com/docs/git-checkout
  cbi  = !BRANCH=$(git branch | grep -v '^*' | tr -d ' ' | fzf --ansi) && git checkout ${BRANCH}
  co   = checkout
  cob  = checkout -b
  coi  = !FILES=$(git -c color.status=always status -s | fzf --ansi --multi --preview 'git diff --color {2}' | awk '{ print $2 }' ) && [[ -n ${FILES} ]] && git checkout ${FILES}
  coci = !HASH=$(git l --color | fzf --ansi --no-sort --preview 'git show --color {2}' | tr -d '|_*./\\\\' | awk '{print $1}') && git checkout $(echo ${HASH} | awk '{ print $1 }')
  cop  = checkout --patch
  copi = !FILES=$(git -c color.status=always status -s | fzf --ansi --multi --preview 'git diff --color {2}' | awk '{ print $2 }' ) && [[ -n ${FILES} ]] && git checkout --patch ${FILES}
    # when merging
  cour = "!f() { git checkout --ours $@ && git add $@; }; f"
  cthe = "!f() { git checkout --theirs $@ && git add $@; }; f"
  # cherry-pick - https://git-scm.com/docs/git-cherry-pick
  chp = cherry-pick
  # clone - https://git-scm.com/docs/git-clone
  cl  = clone
  clb = clone --branch
  clf = clone --depth 1
  # commit - https://git-scm.com/docs/git-commit
  c   = commit
  ca  = commit --amend
  caa = commit --all --amend
  can = commit --amend --no-edit
  ce  = commit --allow-empty
  cem = commit --allow-empty --message
  cf  = commit --fixup
  # Automatic fixup with autosquash without editor prompt - https://stackoverflow.com/a/29094904
  cfi = !HASH=$(git l --color | fzf --ansi --no-sort --preview 'git show --color {2}' | tr -d '|_*./\\\\' | awk '{print $1}') && git commit --fixup ${HASH} && GIT_SEQUENCE_EDITOR=: git rebase --interactive ${HASH}~
  clm = commit --all --message
  cm  = commit --message
  # diff - https://git-scm.com/docs/git-diff
  d    = diff
  di   = !FILES=$(git -c color.status=always status -s | fzf --ansi --multi --preview 'git diff --color {2}' | awk '{ print $2 }') && [[ -n ${FILES} ]] && git diff ${FILES}
  ds   = diff --staged
  dst  = diff --staged --stat
  dsw  = diff --staged --ignore-all-space
  dt   = diff --stat
  dtl  = difftool
  dtlg = difftool --gui
  dts  = difftool --staged
  dtsg = difftool --staged --gui
  dw   = diff --ignore-all-space
  # fetch - https://git-scm.com/docs/git-fetch
  f  = fetch
  fa = fetch --all
  fo = fetch origin
  fu = fetch upstream
  # format-patch - https://git-scm.com/docs/git-format-patch
  fp = format-patch
  # fsck - https://git-scm.com/docs/git-fsck
  fk = fsck
  # gc - https://git-scm.com/docs/git-gc
  gc  = gc
  gca = gc --aggresive
  # grep - https://git-scm.com/docs/git-grep
  g = grep --function-context
  # hub - https://hub.github.com/
  h    = !gh repo view --web
  hc   = !gh repo create
  hcl  = !gh repo clone
  hf   = !gh repo fork
  hi   = !gh issue list
  hic  = !gh issue create
  his  = !gh issue status
  hiv  = !gh issue view
  hp   = !gh pr list
  hpc  = !gh pr create
  hpco = !gh pr checkout
  hpv  = !gh pr view
  # init - https://git-scm.com/docs/git-init
  i = init
  # .gitignore - https://git-scm.com/docs/gitignore
  ig = "!f() { ( [ ! -e .gitignore ] && touch .gitignore ) | echo \"$1\" >> .gitignore; }; f"
  # gitk - https://git-scm.com/docs/gitk
  k = !gitk
  # log - https://git-scm.com/docs/git-log
  l    = log --pretty=l
  ll   = l --numstat
  lll  = l --patch
    # Use fzf to select commits and copy their hash to the clipboard
  lg   = log --all --graph --pretty=lg
  lgi  = !git lg --color | fzf --ansi --multi --no-sort --preview 'git show --color {2}' | tr -d '|_*./\\\\' | awk '{print $1}' | wl-copy
  li   = !git l --color | fzf --ansi --multi --no-sort --preview 'git show --color {2}' | tr -d '|_*./\\\\' | awk '{print $1}' | wl-copy
  llg  = lg --numstat
  lllg = lg --patch
  # merge - https://git-scm.com/docs/git-merge
  m  = merge
  ma = merge --abort
  mc = merge --continue
  mm = merge master
  ms = merge --skip
  # mergetool - https://git-scm.com/docs/git-mergetool
  mt  = mergetool
  mtg = mergetool --gui
  # prune (use git gc which calls git prune)
  # #pr = prune -v
  # pull - https://git-scm.com/docs/git-pull
  # (--rebase by default below)
  pl   = pull
  plf  = pull --force
  plo  = pull origin
  plof = pull origin --force
  plp  = pull upstream
  plpf = pull upstream --force
  # push - https://git-scm.com/docs/git-push
  ps    = push
  psao  = push --all origin
  psaof = push --all origin --force-with-lease
  psau  = push --all upstream
  psauf = push --all upstream --force-with-lease
  psf   = push --force-with-lease
  pso   = push origin
  psof  = push origin --force-with-lease
  psu   = push upstream
  psuf  = push upstream --force-with-lease
  # rebase - https://git-scm.com/docs/git-rebase
  rb   = rebase
  rba  = rebase --abort
  rbc  = rebase --continue
  rbi  = rebase --interactive
  # rebase interactive with fzf from the selected commit (included)
  rbii = !HASH=$(git l --color | fzf --ansi --no-sort --preview 'git show --color {2}' | tr -d '|_*./\\\\' | awk '{print $1}') && git rebase --interactive ${HASH}~
  rbm  = rebase master
  rbs  = rebase --skip
  # reflog - https://git-scm.com/docs/git-reflog
  rf  = reflog --pretty=rf
  rfi = !git rf --color | fzf --ansi --multi --no-sort --preview 'git show --color {2}' | tr -d '|_*./\\\\' | awk '{print $1}' | wl-copy
  # remote - https://git-scm.com/docs/git-remote
  re   = remote
  rea  = remote add
  reao = remote add origin
  reau = remote add upstream
  rem  = remote rename
  rep  = remote prune
  repo = remote prune origin
  repu = remote prune upstream
  rer  = remote remove
  res  = remote show
  reso = remote show origin
  resu = remote show upstream
  rev  = remote --verbose
  # rerere - https://git-scm.com/docs/git-rerere
  rrr = rerere
  # reset - https://git-scm.com/docs/git-reset
  r   = reset
  rh  = reset --hard
  ri  = !FILES=$(git -c color.status=always status -s | fzf --ansi --multi --preview 'git diff --staged --color {2}' | awk '{ print $2 }' ) && [[ -n ${FILES} ]] && git reset --mixed ${FILES}
  rp  = reset --patch
  rpi = !FILES=$(git -c color.status=always status -s | fzf --ansi --multi --preview 'git diff --staged --color {2}' | awk '{ print $2 }' ) && [[ -n ${FILES} ]] && git reset --patch ${FILES}
  rs  = reset --soft
  rsm = reset --mixed # default
  # revert - https://git-scm.com/docs/git-revert
  rv = revert
  # shortlog -- https://git-scm.com/docs/git-shortlog
  slg = shortlog --no-merges --summary --numbered --email
  # stash - https://git-scm.com/docs/git-stash
  sa  = stash apply
  sc  = stash clear
  sd  = stash drop
  sl  = stash list
  sp  = stash pop
  ss  = stash save
  st  = stash
  sw  = stash show
  # status - https://git-scm.com/docs/git-stash
  s = !git -c color.status=always status --branch --show-stash --short | nl -v 0 | sed 's/^\\s+0//'
  # submodule - https://git-scm.com/docs/git-submodule
  sma = submodule add
  sms = submodule status
  smi = submodule init
  smu = submodule update
  smf = submodule foreach
  # tag - https://git-scm.com/docs/git-tag
  t  = tag
  ta = tag --annotate
  # show - https://git-scm.com/docs/git-reset
  w  = show --ext-diff
  wi = !HASH=$(git l --color | fzf --ansi --no-sort --preview 'git show --color {2}' | tr -d '|_*./\\\\' | awk '{print $1}') && git show $(echo ${HASH} | awk '{ print $1 }')
  ws = show --show-signature
  wt = show --stat
  # wip - save work in progress quickly and ready to push it if necessary
  wip = "!f() { git checkout -b wip/\"$1\" && git add --update && git commit -m \"wip: $1\"; }; f"

[blame]
  # https://git-scm.com/docs/git-config#Documentation/git-config.txt-blamecoloring
  # Color blamed lines by date
  coloring = highlightRecent

[branch]
  # https://git-scm.com/docs/git-config#git-config-branchautoSetupRebase
  # Rebase always with new branches
  autosetuprebase = always
  # https://git-scm.com/docs/git-config#Documentation/git-config.txt-branchltnamegtrebase
  # Pass --preserve-merges along to git rebase so that locally committed merge commits will not be flattened by running git pull.
  rebase = merges
  # https://git-scm.com/docs/git-config#Documentation/git-config.txt-branchsort
  # Sort by most recently used branches instead of alphabetical
  sort = committerdate

[checkout]
  # https://git-scm.com/docs/git-config#Documentation/git-config.txt-checkoutdefaultRemote
  # git checkout <something> with only one remote, it does git checkout origin/<something>
  defaultRemote = origin

[color]
  # https://git-scm.com/docs/git-config#Documentation/git-config.txt-colorui
  # Color only when the output is to a terminal
  ui = auto

[color "branch"]
  current  = magenta bold
  local    = white bold
  remote   = cyan bold
  upstream = blue bold

[color "diff"]
  frag     = magenta bold
  meta     = yellow bold
  new      = green bold
  newMoved = yellow bold
  old      = red bold
  oldMoved = cyan bold

[color "grep"]
  filename   = cyan bold
  linenumber = yellow bold
  match      = red bold
  selected   = white
  separator  = magenta bold

[color "interactive"]
  error  = red bold
  header = yellow bold
  help   = white bold
  prompt = red bold

[color "status"]
  added     = yellow bold
  branch    = yellow bold
  changed   = magenta bold
  header    = white bold
  untracked = cyan bold

[commit]
  # https://git-scm.com/docs/git-config#Documentation/git-config.txt-commitgpgSign
  # Sign all commits with gpg
  gpgSign = true
  # https://git-scm.com/docs/git-config#Documentation/git-config.txt-commitverbose
  # Show diff at the bottom of the commit message template to help to describe the commit
  verbose = true

[core]
  # https://git-scm.com/docs/git-config#Documentation/git-config.txt-coreeditor
  # Default editor for commits and tags
  # editor       = $EDITOR
  # https://github.com/github/gitignore/tree/master/Global
  # globally useful gitignores
  excludesfile = ~/.config/git/gitignore_global
  # https://git-scm.com/docs/git-config#Documentation/git-config.txt-corefsmonitor
  # Speed up git by avoiding unnecessary processing of files that have not changed
  fsmonitor  = true
  # https://git-scm.com/docs/git-config#Documentation/git-config.txt-corepager
  # Use delta as pager https://github.com/dandavison/delta
  pager        = delta --dark

[pager]
  # https://git-scm.com/docs/git-config#Documentation/git-config.txt-pagerltcmdgt
  difftool = true

  # https://git-scm.com/docs/git-config#Documentation/git-config.txt-corewhitespace
  # Notify whitespace issues
  whitespace   = fix,-indent-with-non-tab,trailing-space,cr-at-eol

[credential]
  # https://git-scm.com/docs/gitcredentials#Documentation/gitcredentials.txt-cache
  # Cache credentials in memory for a short period of time
  helper = cache

[delta]
  side-by-side                 = false
  features                     = unobtrusive-line-numbers decorations
  whitespace-error-style       = 1 reverse
  minus-emph-style             = normal bold "#901011"
  plus-emph-style              = normal bold "#006000"
[delta "unobtrusive-line-numbers"]
  line-numbers-left-format     = "{nm:>4}┊"
  line-numbers-left-style      = blue
  line-numbers-minus-style      = "#b55a67"
  line-numbers-plus-style       = "#627259"
  line-numbers-right-format    = "{np:>4}│"
  line-numbers-right-style     = blue
  line-numbers                 = true
  line-numbers-zero-style       = "#3b4261"
  minus-emph-style              = syntax "#6b2e43"
  minus-empty-line-marker-style = syntax "#3a273a"
  minus-non-emph-style          = syntax "#3a273a"
  minus-style                   = syntax "#3a273a"
  plus-emph-style               = syntax "#305f6f"
  plus-empty-line-marker-style  = syntax "#273849"
  plus-non-emph-style           = syntax "#273849"
  plus-style                    = syntax "#273849"
[delta "decorations"]
  commit-decoration-style      = bold yellow box ul
  file-style                   = bold yellow ul
  file-decoration-style        = none
  hunk-header-decoration-style = yellow box


[diff]
  # https://git-scm.com/docs/git-config#Documentation/git-config.txt-codehistogramcode
  # Use histogram algorithm
  algorithm       = histogram
  # https://git-scm.com/docs/git-diff#Documentation/git-diff.txt-plain
  # Moved lines in a diff are colored differently
  colorMoved      = plain
  # https://git-scm.com/docs/git-config#Documentation/git-config.txt-diffguitool
  guitool         = meld
  # https://git-scm.com/docs/git-config#Documentation/Documentation/git.txt-config.txt-diffindentHeuristic
  # Experimental heuristics that shift diff hunk boundaries to make patches easier to read
  indentHeuristic = true
  # https://git-scm.com/docs/git-config#Documentation/Documentation/git.txt-config.txt-diffmnemonicPrefix
  # Use a prefix pair that is different from the standard "a/" and "b/" depending on what is being compared
  mnemonicPrefix  = true
  # https://git-scm.com/docs/git-config#Documentation/git-config.txt-diffsubmodule
  # The "diff" format shows an inline diff of the changed contents of the submodule
  submodule = log
  # https://git-scm.com/docs/git-config#Documentation/git-config.txt-difftool
  tool            = difftastic
  # https://difftastic.wilfred.me.uk/git.html
  external        = difft

[difftool]
  # https://git-scm.com/docs/git-config#Documentation/git-config.txt-difftoolprompt
  # Don't ask to hit return to open the difftool
  prompt = false

[difftool "difftastic"]
  cmd = difft "$LOCAL" "$REMOTE"

[difftool "nvimdiff"]
  cmd = nvim -d "$LOCAL" "$REMOTE"

[difftool "meld"]
  cmd = meld "$LOCAL" "$REMOTE"

[fetch]
  # https://git-scm.com/docs/git-config#Documentation/git-config.txt-fetchfsckObjects
  # git-fetch-pack will check all fetched objects
  fsckobjects = true
  # https://git-scm.com/docs/git-config#Documentation/git-config.txt-fetchprune
  # Remove any remote-tracking references that no longer exist on the remote
  prune = true
  # https://git-scm.com/docs/git-config#Documentation/git-config.txt-fetchpruneTags
  # Remove any remote-tag references that no longer exist on the remote
  prunetags = true

[gpg]
  # https://git-scm.com/docs/git-config#Documentation/git-config.txt-gpgprogram
  program = gpg

[grep]
  # https://git-scm.com/docs/git-config#Documentation/git-config.txt-greplineNumber
  # Always show the match with its number of line
  lineNumber  = true
  # https://git-scm.com/docs/git-config#Documentation/git-config.txt-greppatternType
  # Use Perl Regular Expressions
  patternType = perl

[help]
  # https://git-scm.com/docs/git-config#Documentation/git-config.txt-helpautoCorrect
  # Automatically correct and execute mistyped commands immediately
  autocorrect = 0

[hub]
  # https://hub.github.com/hub.1.html
  # Always use git protocol over HTTPS
  protocol = git

# https://git-scm.com/docs/git-config#_includes
# use separate file for username and email
[include]
  path = .config.personal

# https://git-scm.com/docs/git-config#_includes
# use other username and mail for the specific folder structure
# [includeIf "gitdir:~/forks/Work/"]
#   path = .config.work

[init]
  # https://git-scm.com/docs/git-config#Documentation/git-config.txt-initdefaultBranch
  # Allows overriding the default branch name when initializing a new repository
  # or when cloning an empty repository
  defaultBranch = main

[interactive]
  # https://git-scm.com/docs/git-config#Documentation/git-config.txt-interactivediffFilter
  # Pipe the diff through the shell command defined
  diffFilter = delta --color-only

[log]
  # https://git-scm.com/docs/git-config#Documentation/git-config.txt-logdate
  # Use human format by default
  # https://git-scm.com/docs/git-log#Documentation/git-log.txt---dateltformatgt
  date = auto:human

[merge]
  # https://git-scm.com/docs/git-config#git-config-mergeconflictStyle
  # zdiff3 is similar to diff3 but removes matching lines on the two sides from the conflict region
  # when those matching lines appear near either the beginning or end of a conflict region.
  conflictstyle = zdiff3
  # https://git-scm.com/docs/git-config#git-config-mergeff
  # Always do fast-forward when merging, use instead --no-ff
  ff            = true
  # https://git-scm.com/docs/git-mergetool#git-mergetool---gui
  guitool       = meld
  # https://git-scm.com/docs/git-config#git-config-mergetool
  tool          = nvim

[mergetool]
  # https://git-scm.com/docs/git-mergetool#Documentation/git-mergetool.txt---toollttoolgt
  # Use the merge resolution program specified by <tool>
  tool = nvim
  guitool = meld
  # https://git-scm.com/docs/git-config#Documentation/git-config.txt-mergetoolkeepBackup
  # After performing a merge, don't save the original file with conflict markers with a .orig extension
  keepBackup = false
  # https://git-scm.com/docs/git-config#git-config-mergetoolprompt
  # Don't show the message: Hit return to start merge resolution
  prompt =  false

[mergetool "nvim"]
  # User diff3 merge style like in meld
  # For that,  replace $BASE with $MERGED and then hide it
  cmd = nvim -d $LOCAL $MERGED $REMOTE $BASE -c '$wincmd w' -c 'wincmd l' -c 'wincmd c' -c 'wincmd h'
  # https://git-scm.com/docs/git-config#Documentation/git-config.txt-mergetoollttoolgttrustExitCode
  # Specify whether the exit code of the merge command is used to determine whether the merge was successful
  trustExitCode = true

[mergetool "meld"]
  # http://meldmerge.org/
  # User diff3 merge style in meld
  cmd = meld "$LOCAL" "$MERGED" "$REMOTE" --output "$MERGED"
  # https://git-scm.com/docs/git-mergetool#Documentation/git-mergetool.txt-mergetoolmelduseAutoMerge
  useAutoMerge = true
  # https://git-scm.com/docs/git-config#Documentation/git-config.txt-mergetoollttoolgttrustExitCode
  # Specify whether the exit code of the merge command is used to determine whether the merge was successful
  trustExitCode = true

[protocol]
  version = 2

[pretty]
  l  = * %C(bold red)%h%Creset -%C(auto)%d%Creset %s %C(bold green)(%cr) %C(bold blue)<%an>%Creset
  lg = %C(bold red)%h%Creset -%C(auto)%d%Creset %s %C(bold green)(%cr) %C(bold blue)<%an>%Creset
  rf = * %C(bold red)%h%Creset - %<(10)%C(bold)%gD %Creset- %C(auto)%d %gs %C(bold green)(%cr) %C(bold blue)<%an>%Creset

[pull]
  # https://git-scm.com/docs/git-config#git-config-pullff
  # Only allow fast forward merges when pulling
  ff = only
  # https://git-scm.com/docs/git-config#git-config-pullrebase
  # Always rebase preserving merges when pulling
  rebase = merges

[push]
  # https://git-scm.com/docs/git-config#git-config-pushdefault
  # http://stackoverflow.com/a/23918418/89484
  # Push the current branch to update a branch with the same name although it doesn't exist
  default           = current
  # https://git-scm.com/docs/git-config#git-config-pushfollowTags
  # Always push local tags
  followTags        = true
  # https://git-scm.com/docs/git-config#git-config-pushrecurseSubmodules
  # Make sure all submodule commits used by the revisions to be pushed are available on a remote-tracking branch
  # Push also submodules if required
  recurseSubmodules = on-demand

[rebase]
  # git rebase --interactive will use abbreviated command names in the todo list
  abbreviateCommands = true
  # https://git-scm.com/docs/git-config#git-config-rebaseautoSquash
  # Squash always after the interactive rebase
  autoSquash = true
  # https://git-scm.com/docs/git-config#git-config-rebaseautoStash
  # Let run rebase on a dirty worktree running stash and restore automatically
  autoStash  = true
  # https://git-scm.com/docs/git-config#git-config-rebasestat
  # Show a diffstat of what changed upstream since the last rebase
  stat       = true

[rerere]
  # https://git-scm.com/docs/git-config#git-config-rerereautoUpdate
  # Updates the index after resolves conflicts using recorded resolution
  autoupdate = true
  # https://git-scm.com/docs/git-config#git-config-rerereenabled
  # Enable rerere
  enabled = true

[status]
  # https://git-scm.com/docs/git-config#git-config-statusshowStash
  # Display the number of entries currently stashed
  showStash        = true
  # https://git-scm.com/docs/git-config#git-config-statussubmoduleSummary
  # Summary of commits for modified submodules will be shown
  submoduleSummary = true

[tag]
  # https://git-scm.com/docs/git-config#git-config-tagforceSignAnnotated
  # Always sign tags with GPG
  forceSignAnnotated = true

# https://git-scm.com/docs/git-config#git-config-urlltbasegtinsteadOf
# Always rewrite https:// with git:// git clone included
[url "git@github.com:"]
  pushInsteadOf = https://github.com/
  pushInsteadOf = git://github.com/
  pushInsteadOf = gh:
[url "https://github.com/"]
  insteadOf = gh:

[url "git@gitlab.com:"]
  pushInsteadOf = https://gitlab.com/
  pushInsteadOf = gl:
[url "https://gitlab.com/"]
  insteadOf = gl:

[url "git@bitbucket.org:"]
  pushInsteadOf = https://bitbucket.org/
  pushInsteadOf = bb:
[url "https://bitbucket.org/"]
  insteadOf = bb:

[web]
  # https://git-scm.com/docs/git-config#git-config-webbrowser
  # Specify the web browser
  browser = floorp

[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
